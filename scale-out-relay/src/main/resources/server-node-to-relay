#!/bin/sh

#####################################################################################
# Copyright 2011 Normation SAS
#####################################################################################
#
# This file is part of Rudder.
#
# Rudder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# In accordance with the terms of section 7 (7. Additional Terms.) of
# the GNU General Public License version 3, the copyright holders add
# the following Additional permissions:
# Notwithstanding to the terms of section 5 (5. Conveying Modified Source
# Versions) and 6 (6. Conveying Non-Source Forms.) of the GNU General
# Public License version 3, when you create a Related Module, this
# Related Module is not considered as a part of the work and may be
# distributed under the license agreement of your choice.
# A "Related Module" means a set of sources files including their
# documentation that, without modification of the Source Code, enables
# supplementary functions or services in addition to those offered by
# the Software.
#
# Rudder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Rudder.  If not, see <http://www.gnu.org/licenses/>.
#
#####################################################################################

RUDDER_OPT=/opt/rudder
RUDDER_VAR=/var/rudder
RUDDER_JSON="${RUDDER_VAR}/cfengine-community/inputs/rudder.json"

rudder_json_value() {
	jq -r ".$1" ${RUDDER_JSON}
}

if [ -f "${RUDDER_JSON}" ]; then
  RUDDER_VERIFY_CERTIFICATES=$(rudder_json_value 'RUDDER_VERIFY_CERTIFICATES')
fi

if [ "${RUDDER_VERIFY_CERTIFICATES}" = "true" ]
then
  CERTIFICATE_OPTION=""
else
  CERTIFICATE_OPTION="--insecure"
fi

DOWNLOAD_COMMAND="curl --silent --show-error ${CERTIFICATE_OPTION} --location --noproxy --globoff"

usage() {
	echo "Usage: $0 <UUID of the node to make a relay server>"
}

RELAY_UUID=$1

# Check arguments
if [ "${RELAY_UUID}" = "" ]; then
	echo "ERROR: Need the UUID of the Relay server as an argument, aborting."
	usage
	exit 1
elif [ "${RELAY_UUID}" = "aaaaaaaa-bbbb-cccc-dddd-eeeeeeee" ]; then
	echo "ERROR: Please use a real UUID, not the one supplied in the documentation, aborting."
	exit 1
fi

echo "Rudder relay installation script starting, using UUID ${RELAY_UUID}.\n"

# Scale-out-relay API call (must have the plugin installed)
API_URL="https://127.0.0.1/rudder/api/latest/scaleoutrelay/promote/${RELAY_UUID}"
TOKEN_SYSTEM=$(cat /var/rudder/run/api-token)
response=$(${DOWNLOAD_COMMAND} --header "X-API-Token: ${TOKEN_SYSTEM}" --request POST "${API_URL}")
code=$?

if [ ${code} -ne 0 ]; then
	 echo "Failed to promote ${RELAY_UUID} to relay. Code ${code}" 1>&2
	 exit 1
fi

result_api=$(echo "$response" | jq -r '.result')

if [ "${result_api}" = "error" ]; then
	echo "ERROR: Promote ${RELAY_UUID} have failed" 1>&2
	error_details=$(echo "$response" | jq -r '.errorDetails')
	echo "Reason: ${error_details}"
	exit 1
else
	echo "Done."

	echo -n "INFO: Triggering promises generation..."
	${DOWNLOAD_COMMAND} -k "https://localhost/rudder/api/deploy/reload"
	echo " Done."

	echo "\nSuccess: all steps completed successfully."
	exit 0
fi
